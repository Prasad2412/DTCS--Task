//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDwithAngularJS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AngularJSEntities2 : DbContext
    {
        public AngularJSEntities2()
            : base("name=AngularJSEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<State> States { get; set; }
    
        public virtual ObjectResult<CheckDuplicateRecord_Result> CheckDuplicateRecord(string firstName, string lastName, string gender, string state, string city)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckDuplicateRecord_Result>("CheckDuplicateRecord", firstNameParameter, lastNameParameter, genderParameter, stateParameter, cityParameter);
        }
    
        public virtual ObjectResult<GetAllRocordForListing_Result> GetAllRocordForListing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRocordForListing_Result>("GetAllRocordForListing");
        }
    }
}
